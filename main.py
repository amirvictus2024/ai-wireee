from flask import Flask, render_template, request, send_file, jsonify
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric.x25519 import X25519PrivateKey
import base64
import io
import os
import zipfile

app = Flask(__name__)

import random
import ipaddress

LOCATIONS = {
    'de': {
        'name':
        'Germany',
        'cidrs': [
            "84.128.0.0/10", "87.128.0.0/10", "91.0.0.0/10", "79.192.0.0/10",
            "93.192.0.0/10", "217.224.0.0/11", "80.128.0.0/11", "91.32.0.0/11",
            "93.192.0.0/11", "31.224.0.0/11", "79.224.0.0/11", "84.160.0.0/11",
            "87.160.0.0/11", "91.0.0.0/11", "93.224.0.0/11", "217.80.0.0/12",
            "2.160.0.0/12", "37.80.0.0/12", "46.80.0.0/12", "79.208.0.0/12",
            "84.128.0.0/12", "91.32.0.0/12", "93.192.0.0/12", "217.240.0.0/12",
            "79.200.0.0/13", "80.128.0.0/13", "80.144.0.0/13", "84.144.0.0/13",
            "87.136.0.0/13", "87.152.0.0/13", "91.48.0.0/13", "93.208.0.0/13",
            "217.0.0.0/13", "217.88.0.0/13", "217.232.0.0/13", "62.224.0.0/14",
            "62.156.0.0/14", "79.196.0.0/14", "80.136.0.0/14", "80.152.0.0/14",
            "87.128.0.0/14", "87.144.0.0/14", "91.60.0.0/14", "93.220.0.0/14",
            "217.84.0.0/14", "217.224.0.0/14", "84.152.0.0/15",
            "31.212.0.0/15", "37.50.0.0/15", "46.78.0.0/15", "62.154.0.0/15",
            "79.192.0.0/15", "80.140.0.0/15", "80.156.0.0/15", "84.158.0.0/15",
            "87.132.0.0/15", "87.148.0.0/15", "91.56.0.0/15", "93.218.0.0/15",
            "193.158.0.0/15", "212.184.0.0/15", "217.80.0.0/15",
            "217.230.0.0/15", "84.155.0.0/16", "80.187.0.0/16",
            "195.243.0.0/16", "62.153.0.0/16", "79.195.0.0/16",
            "80.142.0.0/16", "84.156.0.0/16", "87.135.0.0/16", "87.151.0.0/16",
            "88.128.0.0/16", "91.59.0.0/16", "93.216.0.0/16", "141.77.0.0/16",
            "194.25.0.0/16", "195.145.0.0/16", "217.82.0.0/16",
            "217.228.0.0/16", "84.154.0.0/17", "79.194.0.0/17",
            "80.143.0.0/17", "80.158.128.0/17", "80.159.0.0/17",
            "84.157.128.0/17", "87.134.128.0/17", "87.150.128.0/17",
            "91.58.0.0/17", "93.217.0.0/17", "217.83.128.0/17",
            "217.229.0.0/17", "84.154.192.0/18", "79.194.192.0/18",
            "80.143.192.0/18", "80.159.128.0/18", "84.157.0.0/18",
            "87.134.0.0/18", "87.150.64.0/18", "91.58.128.0/18",
            "93.217.128.0/18", "149.233.64.0/18", "217.83.64.0/18",
            "217.229.192.0/18", "84.154.160.0/19", "79.194.160.0/19",
            "80.143.128.0/19", "80.159.192.0/19", "82.206.32.0/19",
            "84.157.96.0/19", "87.134.64.0/19", "87.150.0.0/19",
            "91.58.224.0/19", "93.217.224.0/19", "193.30.192.0/19",
            "193.31.128.0/19", "193.254.128.0/19", "194.55.192.0/19",
            "213.173.0.0/19", "217.83.32.0/19", "217.229.160.0/19",
            "84.154.128.0/20", "79.194.128.0/20", "80.143.176.0/20",
            "81.199.64.0/20", "81.201.32.0/20", "84.157.64.0/20",
            "87.134.112.0/20", "87.150.48.0/20", "91.58.208.0/20",
            "93.217.192.0/20", "109.237.176.0/20", "140.233.208.0/20",
            "141.169.240.0/20", "193.99.96.0/20", "193.254.160.0/20",
            "194.39.48.0/20", "204.52.112.0/20", "204.242.64.0/20",
            "204.242.192.0/20", "217.83.0.0/20", "217.229.128.0/20"
        ],
        'ipv6_cidrs': [
            "2003:1000::/20",
            "2003:800::/21",
            "2003:400::/22",
            "2003:200::/23",
            "2003:100::/24",
            "2003::/25",
            "2003:80::/26",
            "2003:d0::/29",
            "2a09:6f80::/29",
            "2a10:cd80::/29",
            "2003:cc::/30",
            "2003:d8::/30",
            "2003:f0::/30",
            "2003:fc::/30",
            "2a01:59c::/30",
            "2a09:8180::/30",
            "2a0e:cbc4::/30",
            "2003:c4::/31",
            "2003:ca::/31",
            "2003:de::/31",
            "2003:e2::/31",
            "2003:e6::/31",
            "2003:f4::/31",
            "2003:f8::/31",
            "2a01:59a::/31",
            "2003:c1::/32",
            "2003:c2::/32",
            "2003:c7::/32",
            "2003:c8::/32",
            "2003:dc::/32",
            "2003:e0::/32",
            "2003:e9::/32",
            "2003:eb::/32",
            "2003:ed::/32",
            "2003:ef::/32",
            "2003:f7::/32",
            "2003:fa::/32",
            "2a01:598::/32",
            "2a03:5ee0::/32",
            "2a0e:eb40::/32",
            "2003:c0::/33",
            "2003:c3::/33",
            "2003:c6:8000::/33",
            "2003:c9::/33",
            "2003:dd::/33",
            "2003:e1:8000::/33",
            "2003:e4::/33",
            "2003:e8:8000::/33",
            "2003:ea:8000::/33",
            "2003:ee:8000::/33",
            "2003:f6:8000::/33",
            "2003:fb::/33",
            "2a01:599:8000::/33",
            "2003:c0:c000::/34",
            "2003:c3:8000::/34",
            "2003:c9:8000::/34",
            "2003:dd:c000::/34",
            "2003:e1:4000::/34",
            "2003:e4:c000::/34",
            "2003:e5:4000::/34",
            "2003:e5:c000::/34",
            "2003:e8:4000::/34",
            "2003:ea::/34",
            "2003:ec:4000::/34",
            "2003:ec:c000::/34",
            "2003:ee:4000::/34",
            "2003:f6:4000::/34",
            "2003:fb:8000::/34",
            "2a01:599:4000::/34",
            "2003:c0:8000::/35",
            "2003:c3:c000::/35",
            "2003:c6::/35",
            "2003:c6:6000::/35",
            "2003:c9:c000::/35",
            "2003:dd:8000::/35",
            "2003:e1::/35",
            "2003:e4:8000::/35",
            "2003:e5::/35",
            "2003:e5:8000::/35",
            "2003:e8:2000::/35",
            "2003:ea:4000::/35",
            "2003:ec::/35",
            "2003:ec:a000::/35",
            "2003:f6:2000::/35",
            "2003:fb:c000::/35",
            "2a01:599:2000::/35",
            "2003:c0:b000::/36",
            "2003:c3:e000::/36",
            "2003:c6:3000::/36",
            "2003:c6:4000::/36",
            "2003:c9:e000::/36",
            "2003:dd:a000::/36",
            "2003:e1:3000::/36",
            "2003:e4:b000::/36",
            "2003:e5:2000::/36",
            "2003:e5:a000::/36",
            "2003:e8:1000::/36",
            "2003:ec:3000::/36",
            "2003:ec:9000::/36",
            "2003:ee:1000::/36",
            "2003:ee:2000::/36",
            "2003:f6:1000::/36",
            "2003:fb:f000::/36",
            "2a01:599:1000::/36",
            "2003:c0:a000::/37",
            "2003:c3:f000::/37",
            "2003:c6:2000::/37",
            "2003:c6:5800::/37",
            "2003:c9:f800::/37",
            "2003:dd:b800::/37",
            "2003:e1:2000::/37",
            "2003:e4:a800::/37",
            "2003:e5:3000::/37",
            "2003:e5:b800::/37",
            "2003:e8::/37",
            "2003:ea:6000::/37",
            "2003:ea:7000::/37",
            "2003:ec:2800::/37",
            "2003:ec:8000::/37",
            "2003:ee::/37",
        ],
        'ports': [443, 1194, 53]
    },
    'se': {
        'name':
        'Sweden',
        'cidrs': [
            "90.128.0.0/12",
            "95.192.0.0/12",
            "2.64.0.0/13",
            "217.208.0.0/13",
            "78.72.0.0/13",
            "83.176.0.0/13",
            "83.248.0.0/13",
            "109.56.0.0/14",
            "176.68.0.0/14",
            "193.12.0.0/14",
            "2.248.0.0/14",
            "213.100.0.0/14",
            "213.64.0.0/14",
            "37.196.0.0/14",
            "5.240.0.0/14",
            "77.216.0.0/14",
            "78.64.0.0/14",
            "81.224.0.0/14",
            "81.236.0.0/14",
            "83.184.0.0/14",
            "90.228.0.0/14",
            "90.236.0.0/14",
            "91.128.0.0/14",
            "188.150.0.0/15",
            "193.216.0.0/15",
            "194.16.0.0/15",
            "194.22.0.0/15",
            "37.2.0.0/15",
            "80.216.0.0/15",
            "81.230.0.0/15",
            "81.232.0.0/15",
            "83.188.0.0/15",
            "90.226.0.0/15",
            "90.234.0.0/15",
            "130.244.0.0/16",
            "148.136.0.0/16",
            "150.227.0.0/16",
            "151.177.0.0/16",
            "159.190.0.0/16",
            "159.193.0.0/16",
            "188.149.0.0/16",
            "193.45.0.0/16",
            "194.18.0.0/16",
            "194.218.0.0/16",
            "195.198.0.0/16",
            "195.67.0.0/16",
            "195.84.0.0/16",
            "212.151.0.0/16",
            "212.181.0.0/16",
            "212.214.0.0/16",
            "212.247.0.0/16",
            "213.50.0.0/16",
            "213.89.0.0/16",
            "37.250.0.0/16",
            "62.20.0.0/16",
            "78.68.0.0/16",
            "78.71.0.0/16",
            "80.170.0.0/16",
            "81.216.0.0/16",
            "81.229.0.0/16",
            "81.235.0.0/16",
            "83.190.0.0/16",
            "88.131.0.0/16",
            "90.144.0.0/16",
            "90.225.0.0/16",
            "90.233.0.0/16",
            "95.209.0.0/16",
            "188.148.0.0/17",
            "213.88.128.0/17",
            "37.0.128.0/17",
            "62.95.0.0/17",
            "83.191.128.0/17",
            "87.227.0.0/17",
            "94.186.0.0/17",
        ],
        'ipv6_cidrs': [
            "2001:2040::/32", "2001:2044::/32", "2a00:800::/32",
            "2a00:cc8::/32", "2a01:b880::/32", "2a02:2348::/32",
            "2a02:5120::/32", "2a02:aa6::/32", "2a00:801:8000::/33",
            "2a01:1b8:8000::/33", "2a02:aa7:8000::/33", "2a02:aa7::/34"
        ],
        'ports': [443, 1194, 53]
    }
}


def generate_random_address(cidr):
    network = ipaddress.ip_network(cidr)
    host = random.randint(1, int(network.num_addresses) - 2)
    return str(network[host])


def generate_keys():
    private_key = X25519PrivateKey.generate()
    private_bytes = private_key.private_bytes(
        encoding=serialization.Encoding.Raw,
        format=serialization.PrivateFormat.Raw,
        encryption_algorithm=serialization.NoEncryption())
    public_key = private_key.public_key()
    public_bytes = public_key.public_bytes(
        encoding=serialization.Encoding.Raw,
        format=serialization.PublicFormat.Raw)
    return {
        'private': base64.b64encode(private_bytes).decode('utf-8'),
        'public': base64.b64encode(public_bytes).decode('utf-8')
    }


@app.route('/')
def index():
    return render_template('index.html', locations=LOCATIONS)


@app.route('/generate-keys', methods=['POST'])
def generate_keys_endpoint():
    return jsonify(generate_keys())


@app.route('/random-address', methods=['POST'])
def random_address():
    data = request.json
    location_data = LOCATIONS[data['location']]
    if data.get('ipv6_enabled'):
        cidr = random.choice(location_data['ipv6_cidrs'])
    else:
        cidr = random.choice(location_data['cidrs'])
    return generate_random_address(cidr)


@app.route('/generate', methods=['POST'])
def generate_config():
    data = request.json
    keys = generate_keys()

    config = f"""[Interface]
PrivateKey = {keys['private']}
Address = {data['address']}
DNS = {data['dns']}
MTU = {data['mtu']}

[Peer]
PublicKey = {data['server_public_key']}
AllowedIPs = {data['allowed_ips']}
Endpoint = {data['endpoint']}:{data['port']}
"""

    if data.get('ipv6_enabled'):
        config = config.replace('AllowedIPs = 0.0.0.0/4',
                                'AllowedIPs = 0.0.0.0/4, ::/4')

    buffer = io.BytesIO(config.encode())
    if data.get('download_type') == 'zip':
        zip_buffer = io.BytesIO()
        with zipfile.ZipFile(zip_buffer, 'w',
                             zipfile.ZIP_DEFLATED) as zip_file:
            zip_file.writestr('wg0.conf', config)
        zip_buffer.seek(0)
        return send_file(zip_buffer,
                         mimetype='application/zip',
                         as_attachment=True,
                         download_name='wireguard-config.zip')
    else:
        return send_file(buffer,
                         mimetype='text/plain',
                         as_attachment=True,
                         download_name='wg0.conf')


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=3000)
